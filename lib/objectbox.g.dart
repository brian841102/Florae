// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/plant.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 6017369575698615271),
      name: 'Care',
      lastPropertyId: const obx_int.IdUid(4, 9170897634876619206),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8647452937344853257),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 9035521047735137659),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 40688042087648428),
            name: 'cycles',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 9170897634876619206),
            name: 'effected',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 8248999037139681305),
      name: 'Plant',
      lastPropertyId: const obx_int.IdUid(6, 8156462471304383266),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 663235456190999336),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7653806020704880625),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4563435691994880788),
            name: 'location',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 370151171891422499),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8736961919321289742),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8156462471304383266),
            name: 'picture',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 4325392459038757092),
            name: 'cares',
            targetId: const obx_int.IdUid(1, 6017369575698615271))
      ],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 8248999037139681305),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(1, 4325392459038757092),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Care: obx_int.EntityDefinition<Care>(
        model: _entities[0],
        toOneRelations: (Care object) => [],
        toManyRelations: (Care object) => {},
        getId: (Care object) => object.id,
        setId: (Care object, int id) {
          object.id = id;
        },
        objectToFB: (Care object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.cycles);
          fbb.addInt64(3, object.effected?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final effectedValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final cyclesParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final effectedParam = effectedValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(effectedValue);
          final object = Care(
              name: nameParam, cycles: cyclesParam, effected: effectedParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Plant: obx_int.EntityDefinition<Plant>(
        model: _entities[1],
        toOneRelations: (Plant object) => [],
        toManyRelations: (Plant object) =>
            {obx_int.RelInfo<Plant>.toMany(1, object.id): object.cares},
        getId: (Plant object) => object.id,
        setId: (Plant object, int id) {
          object.id = id;
        },
        objectToFB: (Plant object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final locationOffset = object.location == null
              ? null
              : fbb.writeString(object.location!);
          final descriptionOffset = fbb.writeString(object.description);
          final pictureOffset =
              object.picture == null ? null : fbb.writeString(object.picture!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, locationOffset);
          fbb.addOffset(3, descriptionOffset);
          fbb.addInt64(4, object.createdAt.millisecondsSinceEpoch);
          fbb.addOffset(5, pictureOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final locationParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final pictureParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final object = Plant(
              name: nameParam,
              id: idParam,
              location: locationParam,
              description: descriptionParam,
              createdAt: createdAtParam,
              picture: pictureParam);
          obx_int.InternalToManyAccess.setRelInfo<Plant>(
              object.cares, store, obx_int.RelInfo<Plant>.toMany(1, object.id));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Care] entity fields to define ObjectBox queries.
class Care_ {
  /// See [Care.id].
  static final id = obx.QueryIntegerProperty<Care>(_entities[0].properties[0]);

  /// See [Care.name].
  static final name = obx.QueryStringProperty<Care>(_entities[0].properties[1]);

  /// See [Care.cycles].
  static final cycles =
      obx.QueryIntegerProperty<Care>(_entities[0].properties[2]);

  /// See [Care.effected].
  static final effected =
      obx.QueryDateProperty<Care>(_entities[0].properties[3]);
}

/// [Plant] entity fields to define ObjectBox queries.
class Plant_ {
  /// See [Plant.id].
  static final id = obx.QueryIntegerProperty<Plant>(_entities[1].properties[0]);

  /// See [Plant.name].
  static final name =
      obx.QueryStringProperty<Plant>(_entities[1].properties[1]);

  /// See [Plant.location].
  static final location =
      obx.QueryStringProperty<Plant>(_entities[1].properties[2]);

  /// See [Plant.description].
  static final description =
      obx.QueryStringProperty<Plant>(_entities[1].properties[3]);

  /// See [Plant.createdAt].
  static final createdAt =
      obx.QueryDateProperty<Plant>(_entities[1].properties[4]);

  /// See [Plant.picture].
  static final picture =
      obx.QueryStringProperty<Plant>(_entities[1].properties[5]);

  /// see [Plant.cares]
  static final cares =
      obx.QueryRelationToMany<Plant, Care>(_entities[1].relations[0]);
}
