// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/plant.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 6017369575698615271),
      name: 'Care',
      lastPropertyId: const IdUid(4, 9170897634876619206),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8647452937344853257),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 9035521047735137659),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 40688042087648428),
            name: 'cycles',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 9170897634876619206),
            name: 'effected',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 8248999037139681305),
      name: 'Plant',
      lastPropertyId: const IdUid(6, 8156462471304383266),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 663235456190999336),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7653806020704880625),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4563435691994880788),
            name: 'location',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 370151171891422499),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8736961919321289742),
            name: 'createdAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8156462471304383266),
            name: 'picture',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 4325392459038757092),
            name: 'cares',
            targetId: const IdUid(1, 6017369575698615271))
      ],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 8248999037139681305),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(1, 4325392459038757092),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Care: EntityDefinition<Care>(
        model: _entities[0],
        toOneRelations: (Care object) => [],
        toManyRelations: (Care object) => {},
        getId: (Care object) => object.id,
        setId: (Care object, int id) {
          object.id = id;
        },
        objectToFB: (Care object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.cycles);
          fbb.addInt64(3, object.effected?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final effectedValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final object = Care(
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              cycles:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              effected: effectedValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(effectedValue))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Plant: EntityDefinition<Plant>(
        model: _entities[1],
        toOneRelations: (Plant object) => [],
        toManyRelations: (Plant object) =>
            {RelInfo<Plant>.toMany(1, object.id): object.cares},
        getId: (Plant object) => object.id,
        setId: (Plant object, int id) {
          object.id = id;
        },
        objectToFB: (Plant object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final locationOffset = object.location == null
              ? null
              : fbb.writeString(object.location!);
          final descriptionOffset = fbb.writeString(object.description);
          final pictureOffset =
              object.picture == null ? null : fbb.writeString(object.picture!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, locationOffset);
          fbb.addOffset(3, descriptionOffset);
          fbb.addInt64(4, object.createdAt.millisecondsSinceEpoch);
          fbb.addOffset(5, pictureOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Plant(
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              location: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              createdAt: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)),
              picture: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14));
          InternalToManyAccess.setRelInfo(object.cares, store,
              RelInfo<Plant>.toMany(1, object.id), store.box<Plant>());
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Care] entity fields to define ObjectBox queries.
class Care_ {
  /// see [Care.id]
  static final id = QueryIntegerProperty<Care>(_entities[0].properties[0]);

  /// see [Care.name]
  static final name = QueryStringProperty<Care>(_entities[0].properties[1]);

  /// see [Care.cycles]
  static final cycles = QueryIntegerProperty<Care>(_entities[0].properties[2]);

  /// see [Care.effected]
  static final effected =
      QueryIntegerProperty<Care>(_entities[0].properties[3]);
}

/// [Plant] entity fields to define ObjectBox queries.
class Plant_ {
  /// see [Plant.id]
  static final id = QueryIntegerProperty<Plant>(_entities[1].properties[0]);

  /// see [Plant.name]
  static final name = QueryStringProperty<Plant>(_entities[1].properties[1]);

  /// see [Plant.location]
  static final location =
      QueryStringProperty<Plant>(_entities[1].properties[2]);

  /// see [Plant.description]
  static final description =
      QueryStringProperty<Plant>(_entities[1].properties[3]);

  /// see [Plant.createdAt]
  static final createdAt =
      QueryIntegerProperty<Plant>(_entities[1].properties[4]);

  /// see [Plant.picture]
  static final picture = QueryStringProperty<Plant>(_entities[1].properties[5]);

  /// see [Plant.cares]
  static final cares =
      QueryRelationToMany<Plant, Care>(_entities[1].relations[0]);
}
